import pandas as pd
import os
from typing import List, Union

def merge_user_files_to_base(
    base_file_path: str,
    user_files: Union[str, List[str]],
    output_path: str = None,
    base_columns: List[str] = ['a', 'b', 'c', 'sum'],
    key_columns: List[str] = ['a', 'b', 'c']
) -> pd.DataFrame:
    """
    将用户文件合并到基准文件中
    
    参数:
    base_file_path: 基准CSV文件路径
    user_files: 用户文件路径，可以是单个文件路径或文件路径列表
    output_path: 输出文件路径，如果为None则不保存文件
    base_columns: 基准文件的列名
    key_columns: 用于合并的关键列名
    user_file_columns: 用户文件的列名
    
    返回:
    合并后的DataFrame
    """
    
    # 读取基准文件
    print(f"正在读取基准文件: {base_file_path}")
    base_df = pd.read_csv(base_file_path, names=base_columns)
    
    # 确保用户文件是列表形式
    if isinstance(user_files, str):
        user_files = [user_files]
    
    # 处理每个用户文件
    for user_file in user_files:
        if not os.path.exists(user_file):
            print(f"警告: 文件 {user_file} 不存在，跳过")
            continue
            
        # 从文件名提取用户account（去掉扩展名）
        account_name = os.path.splitext(os.path.basename(user_file))[0]
        
        print(f"正在处理用户文件: {user_file} (账户: {account_name})")
        
        # 读取用户文件，假设列名为a,b,c,account
        user_df = pd.read_csv(user_file, names=key_columns + ['account'])
        
        # 创建用户数据的副本，只保留关键列和account列
        user_data = user_df[key_columns + ['account']].copy()
        
        # 将基准文件与用户数据合并
        base_df = base_df.merge(
            user_data, 
            on=key_columns, 
            how='left', 
            suffixes=('', f'_{account_name}')
        )
        
        # 重命名新添加的列，去掉后缀（因为我们已经处理了列名）
        # 实际上这里不需要重命名，因为我们在merge时没有使用suffixes冲突
        
    # 保存结果（如果指定了输出路径）
    if output_path:
        base_df.to_csv(output_path, index=False)
        print(f"合并完成！结果已保存到: {output_path}")
    else:
        print("合并完成！")
    
    return base_df

# 更简洁的版本，自动处理目录中的所有用户文件
def merge_user_files_from_directory(
    base_file_path: str,
    user_directory: str,
    output_path: str = None,
    base_columns: List[str] = ['a', 'b', 'c', 'sum'],
    key_columns: List[str] = ['a', 'b', 'c']
) -> pd.DataFrame:
    """
    从目录中读取所有用户文件并合并到基准文件中
    
    参数:
    base_file_path: 基准CSV文件路径
    user_directory: 包含用户文件的目录路径
    output_path: 输出文件路径
    base_columns: 基准文件的列名
    key_columns: 用于合并的关键列名
    
    返回:
    合并后的DataFrame
    """
    
    # 获取目录中的所有CSV文件（排除基准文件）
    user_files = []
    for file in os.listdir(user_directory):
        if file.endswith('.csv') and file != os.path.basename(base_file_path):
            user_files.append(os.path.join(user_directory, file))
    
    print(f"找到 {len(user_files)} 个用户文件")
    
    # 使用之前的函数进行合并
    return merge_user_files_to_base(
        base_file_path=base_file_path,
        user_files=user_files,
        output_path=output_path,
        base_columns=base_columns,
        key_columns=key_columns
    )

# 使用示例
if __name__ == "__main__":
    # 示例1: 合并单个或多个指定文件
    result1 = merge_user_files_to_base(
        base_file_path="base_file_A.csv",
        user_files=["user1.csv", "user2.csv", "user3.csv"],
        output_path="merged_result.csv"
    )
    
    # 示例2: 合并目录中的所有用户文件
    result2 = merge_user_files_from_directory(
        base_file_path="base_file_A.csv",
        user_directory="./user_files/",
        output_path="merged_result_directory.csv"
    )
    
    # 打印结果的前几行
    print("\n合并结果预览:")
    print(result1.head())
