import pandas as pd
import os
from typing import List, Union

def merge_user_files_to_base(
    base_file_path: str,
    user_files: Union[str, List[str]],
    output_path: str = None,
    base_columns: List[str] = None,
    key_columns: List[str] = ['app_id', 'year_month_str']
) -> pd.DataFrame:

    print(f"正在读取基准文件: {base_file_path}")
    if base_columns:
        base_df = pd.read_csv(base_file_path, names=base_columns)
    else:
        base_df = pd.read_csv(base_file_path)
        base_columns = base_df.columns.tolist()
    del base_df['year_month']
    for col in key_columns:
        if col not in base_df.columns:
            raise ValueError(f"关键列 '{col}' 不在基准文件中")

    for col in key_columns:
        base_df[col] = base_df[col].astype(str)
    
    if isinstance(user_files, str):
        user_files = [user_files]
    
    for i, user_file in enumerate(user_files):
        print(user_file)
        if not os.path.exists(user_file):
            print(f"警告: 文件 {user_file} 不存在，跳过")
            continue
            
        print(f"正在处理用户文件: {user_file}")
        
        user_df = pd.read_csv(user_file)
        del user_df['year_month']
        user_df.rename(columns={'sum': user_file.split('-')[1]}, inplace=True)
        print(user_df.columns)
        user_columns = user_df.columns.tolist()
        
        missing_key_columns = [col for col in key_columns if col not in user_columns]
        if missing_key_columns:
            print(f"警告: 文件 {user_file} 中缺少关键列 {missing_key_columns}，跳过")
            continue
        
        account_columns = [col for col in user_columns if col not in key_columns]
        print(account_columns)
        if not account_columns:
            print(f"警告: 文件 {user_file} 中没有找到account列（除了关键列 {key_columns} 之外的列），跳过")
            continue
        
        if len(account_columns) > 1:
            print(f"警告: 文件 {user_file} 中有多个非关键列: {account_columns}，将使用第一列: {account_columns[0]}")
        
        account_column = account_columns[0]
        print(f"  识别到account列: {account_column}")
        
        for col in key_columns:
            user_df[col] = user_df[col].astype(str)
        
        user_data = user_df[key_columns + [account_column]].copy()
        
        new_column_name = f'{account_column}'
        user_data = user_data.rename(columns={account_column: new_column_name})
        print(user_data)
        base_df = base_df.merge(
            user_data, 
            on=key_columns, 
            how='left'
        )
        print(base_df)
        print(f"  成功合并，新增列: {new_column_name}")
    
    if output_path:
        base_df.to_csv(output_path, index=False)
        print(f"合并完成！结果已保存到: {output_path}")
    else:
        print("合并完成！")
    
    return base_df

def merge_user_files_from_directory(
    base_file_path: str,
    user_directory: str,
    output_path: str = None,
    base_columns: List[str] = None,
    key_columns: List[str] = ['a', 'b', 'c']
) -> pd.DataFrame:

    user_files = []
    for file in os.listdir(user_directory):
        if file.endswith('.csv') and file != os.path.basename(base_file_path):
            user_files.append(os.path.join(user_directory, file))
    
    print(f"找到 {len(user_files)} 个用户文件")

    return merge_user_files_to_base(
        base_file_path=base_file_path,
        user_files=user_files,
        output_path=output_path,
        base_columns=base_columns,
        key_columns=key_columns
    )

if __name__ == "__main__":
    result1 = merge_user_files_to_base(
        base_file_path="AWS Cost Explorer-data.csv",
        user_files=["AWS Cost Explorer-Account_074753629274-data.csv", 
                   "AWS Cost Explorer-Account_296062570773-data.csv", 
                   "AWS Cost Explorer-Account_464714954899-data.csv",
                     "AWS Cost Explorer-Account_490670967268-data.csv",
                     "AWS Cost Explorer-Account_517691465812-data.csv",
                     "AWS Cost Explorer-Account_614833898510-data.csv",
                     "AWS Cost Explorer-Account_749187906254-data.csv",
                     "AWS Cost Explorer-Account_782988951752-data.csv",
                     "AWS Cost Explorer-Account_846232256534-data.csv"],
        output_path="merged_result6.csv",
        key_columns=['app_id', 'year_month_str', 'project']  # 根据实际列名修改
    )

    result2 = merge_user_files_to_base(
        base_file_path="AWS Cost Explorer-service.csv",
        user_files=["AWS Cost Explorer-Account_074753629274-service.csv", 
                   "AWS Cost Explorer-Account_296062570773-service.csv", 
                   "AWS Cost Explorer-Account_464714954899-service.csv",
                     "AWS Cost Explorer-Account_490670967268-service.csv",
                     "AWS Cost Explorer-Account_517691465812-service.csv",
                     "AWS Cost Explorer-Account_614833898510-service.csv",
                     "AWS Cost Explorer-Account_749187906254-service.csv",
                     "AWS Cost Explorer-Account_782988951752-service.csv",
                     "AWS Cost Explorer-Account_846232256534-service.csv"],
        output_path="merged_result7.csv",
        key_columns=['app_id', 'year_month_str', 'service']  # 根据实际列名修改
    )

    
    # result2 = merge_user_files_from_directory(
    #     base_file_path="base_file_A.csv",
    #     user_directory="./user_files/",
    #     output_path="merged_result_directory.csv",
    #     key_columns=['project', 'department', 'category']  # 根据实际列名修改
    # )
    
    print("\n合并结果预览:")
    
